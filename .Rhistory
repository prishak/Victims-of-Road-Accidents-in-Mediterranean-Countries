# #Employees in this company are mostly married.
#================= Monthly income ============Maritical_sat<-myData %>%
Monthly_income<-ggplot(data=myData, aes(myData$MonthlyIncome)) +
geom_histogram(breaks=seq(0,20000, by=1000),
col="red",
aes(fill=..count..))+
labs(x="Salary (Monthly)", y="Employee Count")+
scale_fill_gradient("Count", low="orange", high="red")
Monthly_income
# Most of the employees earn less.
#================== "MonthlyRate" =============
#*****************************
#================== "NumCompaniesWorked"========
table(myData$NumCompaniesWorked)
hist(attrition.df$NumCompaniesWorked,main="Number of companies Worked with",xlab="Number of companies",ylab="Count",col="orange")
#      #MOst of the people have changed their company less than 2 times.
#================== "Over18" ===================
# All employ above 18 year old
#================== "OverTime" =================
table(myData$OverTime)
over_time<-myData %>%
group_by(OverTime) %>%
tally() %>%
ggplot(aes(x = OverTime, y = n,fill=OverTime)) +
geom_bar(stat = "identity") +
theme_minimal()+
labs(x="Over time ",y="Employee Count")+
ggtitle("No. of Employee work overtime ")+
geom_text(aes(label = n),vjust=-0.5, position = position_dodge(0.9))
over_time
#Most of the employees dont go for over time in this firm.
#================== "PercentSalaryHike" ===========
#================== "PerformanceRating" ===========
#PerformanceRating:-1 'Low' 2 'Good' 3 'Excellent' 4 'Outstanding'
table(myData$PerformanceRating)
performance_rating<-myData %>%
group_by(PerformanceRating) %>%
tally() %>%
ggplot(aes(x = PerformanceRating, y = n,fill=PerformanceRating)) +
geom_bar(stat = "identity") +
theme_minimal()+
labs(x="Performance Rating",y="Employee Count")+
ggtitle("Performance Rating of Employee ")+
geom_text(aes(label = n),vjust=-0.5, position = position_dodge(0.9))
performance_rating
#=================== "RelationshipSatisfaction" ==========
#RelationshipSatisfaction :-1 'Low' 2 'Medium' 3 'High' 4 'Very High'
table(myData$RelationshipSatisfaction)
Relation_sat<-myData %>%
group_by(RelationshipSatisfaction) %>%
tally() %>%
ggplot(aes(x = RelationshipSatisfaction, y = n,fill=RelationshipSatisfaction)) +
geom_bar(stat = "identity") +
theme_minimal()+
labs(x="Relationship satisfaction",y="Employee Count")+
ggtitle("Relationship satisfaction of Employee ")+
geom_text(aes(label = n),vjust=-0.5, position = position_dodge(0.9))
Relation_sat
#================="StandardHours"  ==================
# same value apper in all row
#================= "StockOptionLevel" =============
table(myData$StockOptionLevel)
myData %>%
group_by(StockOptionLevel) %>%
tally() %>%
ggplot(aes(x = StockOptionLevel, y = n,fill=StockOptionLevel)) +
geom_bar(stat = "identity") +
theme_minimal()+
labs(x="Stock option level",y="Employee Count")+
ggtitle("Stock Option level of Employee ")+
geom_text(aes(label = n),vjust=-0.5, position = position_dodge(0.9))
#================ "TotalWorkingYears" =============
table(myData$TotalWorkingYears)
Total_working_yr<-ggplot(data=myData, aes(myData$TotalWorkingYears)) +
geom_histogram(breaks=seq(0,40, by=1),
col="red",
aes(fill=..count..))+
labs(x="Total Working Year", y="Employee Count")+
scale_fill_gradient("Count", low="green", high="red")
Total_working_yr
# Most of the employ worked there from 6 to 10 year...not much longer time employ
#================"TrainingTimesLastYear" =============
table(myData$TrainingTimesLastYear)
Total_working_yr<-ggplot(data=myData, aes(myData$TrainingTimesLastYear)) +
geom_histogram(breaks=seq(0,6, by=1),
col="red",
aes(fill=..count..))+
labs(x="Training Time", y="Employee Count")+
scale_fill_gradient("Count", low="green", high="red")
Total_working_yr
# most of employ went for training only 2 to 3 time.
#================ "WorkLifeBalance" ===============
#WorkLifeBalance 1 'Bad' 2 'Good' 3 'Better' 4 'Best'
table(myData$WorkLifeBalance)
work_bal<-myData %>%
group_by(WorkLifeBalance) %>%
tally() %>%
ggplot(aes(x = WorkLifeBalance, y = n,fill=WorkLifeBalance)) +
geom_bar(stat = "identity") +
theme_minimal()+
labs(x="Work life balance",y="Employee Count")+
ggtitle("Work life Balance of Employee ")+
geom_text(aes(label = n),vjust=-0.5, position = position_dodge(0.9))
work_bal
#Work life balance is better in IBM.
#================ "YearsAtCompany"  ===========
yr_at_compny<-r<-ggplot(data=myData, aes(myData$YearsAtCompany)) +
geom_histogram(breaks=seq(0,40, by=1),
col="red",
aes(fill=..count..))+
labs(x="Working year", y="Employee Count")+
scale_fill_gradient("Count", low="green", high="red")
yr_at_compny
#Most of the employees at IBM are new and have served the company for less than 10 years.
#================ "YearsInCurrentRole" =========
table(myData$YearsInCurrentRole)
work_on_samerole<-ggplot(data=myData, aes(myData$YearsInCurrentRole)) +
geom_histogram(breaks=seq(0,18, by=1),
col="red",
aes(fill=..count..))+
labs(x="Working year on same role", y="Employee Count")+
scale_fill_gradient("Count", low="green", high="red")
work_on_samerole
#Most of the employees have been in the same role for long period
#===============  "YearsSinceLastPromotion" =======
table(myData$YearsSinceLastPromotion)
hist(attrition.df$YearsSinceLastPromotion,main="years since last promotion",xlab="Years count",ylab="Count",col="yellow")
#Most of the employees have been promoted in the last five years.
#=============== "YearsWithCurrManager" ===========
hist(attrition.df$YearsWithCurrManager,main="Years with current manager",xlab="Years count",ylab="Count",col="yellow")
#Most of the employees have been with the same manager for less than 5 years.
##============See the over all==========
###============Personal================
grid.arrange(age,distance,gender,maritical,Relation_sat)
#result:- Most of the employ in the company are married and male dominating who are live near to company and relationship satisfaction.
####============= Educational===============
grid.arrange(department,education,edu_field,Job_Role,Job_satiftn,performance_rating)
#IBM company's main focus is on research and development as it has the largest team.
#Most of the employees have a bachelor's degree.
# most of the Employ having Life science as educational field followed by medical
# Most of the people from Sales Executive Role ;followed by research Scientist then Laboratory Technician.
# most of the employ is satisfied with their job
#
###=================Year======================
grid.arrange(department,education,edu_field,Job_Role,Job_satiftn,performance_rating)
grid.arrange(businesstravel,department,distance,education,Env_satfacn,Job_invlment, Job_level, Job_Role)
grid.arrange(Job_satiftn, maritical, Monthly_income,over_time, performance_rating, Relation_sat, Total_working_yr,work_bal)
grid.arrange(age,distance,gender,maritical)
grid.arrange(department,education,Env_satfacn,Job_invlment, Job_level, Job_Role)
grid.arrange(Job_satiftn, performance_rating, Relation_sat, work_bal, businesstravel,attrition)
grid.arrange( Monthly_income, Total_working_yr, yr_at_compny, work_on_samerole, over_time)
plot(a_Dt)
#Plot the decision tree:-
plot(a_Dt)
#Plot the decision tree:-
plot(a_Dt)
library(party)
a_Dt<-ctree(Attrition~.,data=a_Train)
tg_dt_pre<-predict(a_Dt,a_Test,type="response")
R_Df<-data.frame(tg_dt_pre,a_Test$Attrition)
colnames(R_Df)<-c("Predicted","Actual")
tab1<-table(R_Df$Predicted,R_Df$Achual);tab1 #Confusion matrix
Dicision_Tree_ACC<-round(sum(diag(tab1))/sum(tab1)*100,digits=3);Dicision_Tree_ACC   #Accuracy 87.956%
tab_R_CTG<-table(myData$Attrition);tab_R_CTG
#Plot the decision tree:-
plot(a_Dt)
library(dplyr)
library(VIM)
library(DT)
library(gridExtra)
library(ggplot2)
library(caret)
library(Metrics)
library(randomForest)
library(pROC)
library(e1071)
library(dtree)
library(corrplot)
library(DMwR)
#Reading Data : fread is very fast reading function
myData <- read.csv('C:/Users/Takshak/Desktop/Priyanka/priyanka R work/Attrition.csv',sep = ',',header = TRUE,stringsAsFactors = TRUE)
view(myData)
#First view in Data
names(myData)
str(myData)    # glimpse(myData)
dim(myData)    #1470 35
summary(myData)
#Removing the column from data which have same value or no use in analysis
myData$EmployeeNumber<-myData$StandardHours <-myData$Over18 <-myData$EmployeeCount <- NULL
dim(myData)
colSums(is.na(myData))
#Converting into factor
myData$Education <- factor(myData$Education)
myData$EnvironmentSatisfaction <- factor(myData$EnvironmentSatisfaction)
myData$JobInvolvement <- factor(myData$JobInvolvement)
myData$JobLevel <- factor(myData$JobLevel)
myData$JobSatisfaction <- factor(myData$JobSatisfaction)
myData$PerformanceRating <- factor(myData$PerformanceRating)
myData$RelationshipSatisfaction <- factor(myData$RelationshipSatisfaction)
myData$StockOptionLevel <- factor(myData$StockOptionLevel)
myData$WorkLifeBalance <- factor(myData$WorkLifeBalance)
library(party)
a_Dt<-ctree(Attrition~.,data=a_Train)
tg_dt_pre<-predict(a_Dt,a_Test,type="response")
R_Df<-data.frame(tg_dt_pre,a_Test$Attrition)
colnames(R_Df)<-c("Predicted","Actual")
tab1<-table(R_Df$Predicted,R_Df$Achual);tab1 #Confusion matrix
Dicision_Tree_ACC<-round(sum(diag(tab1))/sum(tab1)*100,digits=3);Dicision_Tree_ACC   #Accuracy 87.956%
tab_R_CTG<-table(myData$Attrition);tab_R_CTG
#Plot the decision tree:-
plot(a_Dt)
library(dplyr)
library(VIM)
library(DT)
library(gridExtra)
library(ggplot2)
library(caret)
library(Metrics)
library(randomForest)
library(pROC)
library(e1071)
library(dtree)
library(corrplot)
library(DMwR)
#Reading Data : fread is very fast reading function
myData <- read.csv('C:/Users/Takshak/Desktop/Priyanka/priyanka R work/Attrition.csv',sep = ',',header = TRUE,stringsAsFactors = TRUE)
view(myData)
#First view in Data
names(myData)
str(myData)    # glimpse(myData)
dim(myData)    #1470 35
summary(myData)
#Removing the column from data which have same value or no use in analysis
myData$EmployeeNumber<-myData$StandardHours <-myData$Over18 <-myData$EmployeeCount <- NULL
dim(myData)
colSums(is.na(myData))
#Converting into factor
myData$Education <- factor(myData$Education)
myData$EnvironmentSatisfaction <- factor(myData$EnvironmentSatisfaction)
myData$JobInvolvement <- factor(myData$JobInvolvement)
myData$JobLevel <- factor(myData$JobLevel)
myData$JobSatisfaction <- factor(myData$JobSatisfaction)
myData$PerformanceRating <- factor(myData$PerformanceRating)
myData$RelationshipSatisfaction <- factor(myData$RelationshipSatisfaction)
myData$StockOptionLevel <- factor(myData$StockOptionLevel)
myData$WorkLifeBalance <- factor(myData$WorkLifeBalance)
#============= sampling ============================
a_smpl<-sample(2,nrow(myData),replace = TRUE,prob = c(.8,.2)) # Modelling
a_Train<-myData[a_smpl==1,]
a_Test<-myData[a_smpl==2,]
dim(a_Train);dim(a_Test)
#==============  Logistic regression ===============
Model_lr_train<-glm(Attrition~.,family=binomial,data = a_Train)
summary(Model_lr_train)
pred_lr<-predict(Model_lr_train,a_Test,type="response")
Df1<-data.frame(pred_lr,a_Test$Attrition)
Df1<-mutate(Df1,pred_lr=ifelse(pred_lr>.5,1,0))
colnames(Df1)<-c("predict","actual")
tab<-table(Df1$predict,Df1$actual);tab  # confusion matrix
Log_Acc<-round(sum(diag(tab))/sum(tab)*100,digits = 3);Log_Acc #Accuracy 89.416%
#======================== Random Forest =======================
library(randomForest)
a_rf<-randomForest(Attrition~.,data=a_Train) # Randomforest Functio & control no. tree
tg_rf_pre<-predict(a_rf,a_Test,type="response")
R_rf<-data.frame(tg_rf_pre,a_Test$Attrition)
colnames(R_rf)<-c("Predicted","Actual")   #Confusion matrix
tab1<-table(R_rf$Predicted,R_rf$Achual);tab1
Random_Acc<-round(sum(diag(tab1))/sum(tab1)*100,digits = 3);Random_Acc   #Accuracy 88.321%
#====================== Dicision Tree ===================================
library(party)
a_Dt<-ctree(Attrition~.,data=a_Train)
tg_dt_pre<-predict(a_Dt,a_Test,type="response")
R_Df<-data.frame(tg_dt_pre,a_Test$Attrition)
colnames(R_Df)<-c("Predicted","Actual")
tab1<-table(R_Df$Predicted,R_Df$Achual);tab1 #Confusion matrix
Dicision_Tree_ACC<-round(sum(diag(tab1))/sum(tab1)*100,digits=3);Dicision_Tree_ACC   #Accuracy 87.956%
tab_R_CTG<-table(myData$Attrition);tab_R_CTG
#Plot the decision tree:-
plot(a_Dt)
#============Accuracy=====================
classification<-c("Decision Tree","Random Forest ","Logistic Regression")
Accuray<-paste(c(Dicision_Tree_ACC,Random_Acc,Log_Acc),each="%")
cbind(classification,Accuray)
library(dplyr)
library(VIM)
library(DT)
library(gridExtra)
library(ggplot2)
library(caret)
library(Metrics)
library(randomForest)
library(pROC)
library(e1071)
library(dtree)
library(corrplot)
library(DMwR)
#Reading Data : fread is very fast reading function
myData <- read.csv('C:/Users/Takshak/Desktop/Priyanka/priyanka R work/Attrition.csv',sep = ',',header = TRUE,stringsAsFactors = TRUE)
view(myData)
#First view in Data
names(myData)
str(myData)    # glimpse(myData)
dim(myData)    #1470 35
summary(myData)
#Removing the column from data which have same value or no use in analysis
myData$EmployeeNumber<-myData$StandardHours <-myData$Over18 <-myData$EmployeeCount <- NULL
dim(myData)
colSums(is.na(myData))
#Converting into factor
myData$Education <- factor(myData$Education)
myData$EnvironmentSatisfaction <- factor(myData$EnvironmentSatisfaction)
myData$JobInvolvement <- factor(myData$JobInvolvement)
myData$JobLevel <- factor(myData$JobLevel)
myData$JobSatisfaction <- factor(myData$JobSatisfaction)
myData$PerformanceRating <- factor(myData$PerformanceRating)
myData$RelationshipSatisfaction <- factor(myData$RelationshipSatisfaction)
myData$StockOptionLevel <- factor(myData$StockOptionLevel)
myData$WorkLifeBalance <- factor(myData$WorkLifeBalance)
#============= sampling ============================
a_smpl<-sample(2,nrow(myData),replace = TRUE,prob = c(.8,.2)) # Modelling
a_Train<-myData[a_smpl==1,]
a_Test<-myData[a_smpl==2,]
dim(a_Train);dim(a_Test)
#==============  Logistic regression ===============
Model_lr_train<-glm(Attrition~.,family=binomial,data = a_Train)
summary(Model_lr_train)
pred_lr<-predict(Model_lr_train,a_Test,type="response")
Df1<-data.frame(pred_lr,a_Test$Attrition)
Df1<-mutate(Df1,pred_lr=ifelse(pred_lr>.5,1,0))
colnames(Df1)<-c("predict","actual")
tab<-table(Df1$predict,Df1$actual);tab  # confusion matrix
Log_Acc<-round(sum(diag(tab))/sum(tab)*100,digits = 3);Log_Acc #Accuracy 89.416%
#======================== Random Forest =======================
library(randomForest)
a_rf<-randomForest(Attrition~.,data=a_Train) # Randomforest Functio & control no. tree
tg_rf_pre<-predict(a_rf,a_Test,type="response")
R_rf<-data.frame(tg_rf_pre,a_Test$Attrition)
colnames(R_rf)<-c("Predicted","Actual")   #Confusion matrix
tab1<-table(R_rf$Predicted,R_rf$Achual);tab1
Random_Acc<-round(sum(diag(tab1))/sum(tab1)*100,digits = 3);Random_Acc   #Accuracy 88.321%
#====================== Dicision Tree ===================================
library(party)
a_Dt<-ctree(Attrition~.,data=a_Train)
tg_dt_pre<-predict(a_Dt,a_Test,type="response")
R_Df<-data.frame(tg_dt_pre,a_Test$Attrition)
colnames(R_Df)<-c("Predicted","Actual")
tab1<-table(R_Df$Predicted,R_Df$Achual);tab1 #Confusion matrix
Dicision_Tree_ACC<-round(sum(diag(tab1))/sum(tab1)*100,digits=3);Dicision_Tree_ACC   #Accuracy 87.956%
tab_R_CTG<-table(myData$Attrition);tab_R_CTG
#Plot the decision tree:-
plot(a_Dt)
#============Accuracy=====================
classification<-c("Decision Tree","Random Forest ","Logistic Regression")
Accuray<-paste(c(Dicision_Tree_ACC,Random_Acc,Log_Acc),each="%")
cbind(classification,Accuray)
library(dplyr)
library(VIM)
library(DT)
library(gridExtra)
library(ggplot2)
library(caret)
library(Metrics)
library(randomForest)
library(pROC)
library(e1071)
library(dtree)
library(dtree)
library(party)
install.packages("party")
library(randomForest)
library(pROC)
library(e1071)
library(dtree)
library(party)
install.packages("party")
library(party)
install.packages("libcoin")
install.packages("party")
library(randomForest)
library(pROC)
library(e1071)
library(dtree)
library(party)
library(e1071)
library(dtree)
library(dplyr)
library(VIM)
library(DT)
library(gridExtra)
library(ggplot2)
library(caret)
library(Metrics)
library(randomForest)
library(pROC)
library(e1071)
library(dtree)
library(evtree)
install.packages("evtree")
library(e1071)
library(dtree)
library(corrplot)
library(DMwR)
#Reading Data : fread is very fast reading function
myData <- read.csv('C:/Users/Takshak/Desktop/Priyanka/priyanka R work/Attrition.csv',sep = ',',header = TRUE,stringsAsFactors = TRUE)
#Reading Data : fread is very fast reading function
myData <- read.csv('C:/Users/Takshak/Desktop/Desktop/Priyanka/priyanka R work/Attrition.csv',sep = ',',header = TRUE,stringsAsFactors = TRUE)
view(myData)
#First view in Data
names(myData)
str(myData)    # glimpse(myData)
dim(myData)    #1470 35
summary(myData)
#Removing the column from data which have same value or no use in analysis
myData$EmployeeNumber<-myData$StandardHours <-myData$Over18 <-myData$EmployeeCount <- NULL
dim(myData)
colSums(is.na(myData))
#Converting into factor
myData$Education <- factor(myData$Education)
myData$EnvironmentSatisfaction <- factor(myData$EnvironmentSatisfaction)
myData$JobInvolvement <- factor(myData$JobInvolvement)
myData$JobLevel <- factor(myData$JobLevel)
myData$JobSatisfaction <- factor(myData$JobSatisfaction)
myData$PerformanceRating <- factor(myData$PerformanceRating)
myData$RelationshipSatisfaction <- factor(myData$RelationshipSatisfaction)
myData$StockOptionLevel <- factor(myData$StockOptionLevel)
myData$WorkLifeBalance <- factor(myData$WorkLifeBalance)
a_smpl<-sample(2,nrow(myData),replace = TRUE,prob = c(.8,.2)) # Modelling
a_Train<-myData[a_smpl==1,]
a_Test<-myData[a_smpl==2,]
dim(a_Train);dim(a_Test)
Model_lr_train<-glm(Attrition~.,family=binomial,data = a_Train)
summary(Model_lr_train)
pred_lr<-predict(Model_lr_train,a_Test,type="response")
Df1<-data.frame(pred_lr,a_Test$Attrition)
Df1<-mutate(Df1,pred_lr=ifelse(pred_lr>.5,1,0))
colnames(Df1)<-c("predict","actual")
tab<-table(Df1$predict,Df1$actual);tab  # confusion matrix
Log_Acc<-round(sum(diag(tab))/sum(tab)*100,digits = 3);Log_Acc #Accuracy 89.416%
#======================== Random Forest =======================
library(randomForest)
a_rf<-randomForest(Attrition~.,data=a_Train) # Randomforest Functio & control no. tree
tg_rf_pre<-predict(a_rf,a_Test,type="response")
R_rf<-data.frame(tg_rf_pre,a_Test$Attrition)
colnames(R_rf)<-c("Predicted","Actual")   #Confusion matrix
tab1<-table(R_rf$Predicted,R_rf$Achual);tab1
Random_Acc<-round(sum(diag(tab1))/sum(tab1)*100,digits = 3);Random_Acc   #Accuracy 88.321%
library(party)
a_Dt<-ctree(Attrition~.,data=a_Train)
tg_dt_pre<-predict(a_Dt,a_Test,type="response")
R_Df<-data.frame(tg_dt_pre,a_Test$Attrition)
colnames(R_Df)<-c("Predicted","Actual")
tab1<-table(R_Df$Predicted,R_Df$Achual);tab1 #Confusion matrix
Dicision_Tree_ACC<-round(sum(diag(tab1))/sum(tab1)*100,digits=3);Dicision_Tree_ACC   #Accuracy 87.956%
tab_R_CTG<-table(myData$Attrition);tab_R_CTG
#Plot the decision tree:-
plot(a_Dt)
#============Accuracy=====================
classification<-c("Decision Tree","Random Forest ","Logistic Regression")
Accuray<-paste(c(Dicision_Tree_ACC,Random_Acc,Log_Acc),each="%")
cbind(classification,Accuray)
runApp('C:/Priyanka/Coursera/shiny/Nobel_Prize_winner')
runApp('C:/Priyanka/Coursera/shiny/Nobel_Prize_winner')
install.packages("MASS")
install.packages("MASS")
install.packages("MASS")
shiny::runApp('C:/Priyanka/Coursera/shiny/Nobel_Prize_winner')
grid.arrange(department,education,Job_invlment, Job_level, Job_Role,Env_satfacn)
grid.arrange(Job_satiftn, performance_rating, Relation_sat, work_bal, businesstravel,attrition)
grid.arrange( Monthly_income, Total_working_yr, yr_at_compny, work_on_samerole, over_time)
install.packages("gridExtra")
install.packages("MASS")
install.packages("MASS")
install.packages("gridExtra")
shiny::runApp('C:/Priyanka/Coursera/shiny/Nobel_Prize_winner')
shiny::runApp('C:/Priyanka/Coursera/shiny/Nobel_Prize_winner')
install.packages("rsconnect")
library(tinytex)
install.packages("tinytex")
tinytex::install_tinytex()
tinytex::install_tinytex()
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
library(rsconnect)
shiny::runApp('C:/Priyanka/Coursera/shiny/Nobel_Prize_winner')
runApp('C:/Priyanka/Coursera/shiny/Nobel_Prize_winner')
runApp('C:/Priyanka/Coursera/shiny/Nobel_Prize_winner')
library(rsconnect)
deployApp()
library(rsconnect)
deployApp()
rsconnect::setAccountInfo(name="priyankaapp", token="<TOKEN>", secret="<SECRET>")
rsconnect::setAccountInfo(name='priyankaapp',
token='3226FE86381BDE93D9251B59C09219D5',
secret='3KNAaOhAtVGp5Jgx9NeHCVcpKLTMYCxbJoDTnwRs')
runApp('C:/Priyanka/Coursera/shiny/Nobel_Prize_winner')
runApp('C:/Priyanka/Coursera/shiny/Road_accident2005_17')
install.packages("RInno")
require(RInno)
RInno::install_inno()
create_app(app_name = "priyankaapp", app_dir = "path/to/myapp", include_R = TRUE)
shinyapps-support@rstudio.com
runApp('C:/Priyanka/Coursera/shiny/Road_accident2005_17')
runApp('C:/Priyanka/Coursera/shiny/Road_accident2005_17')
runApp('C:/Priyanka/Coursera/shiny/Road_accident2005_17')
runApp('C:/Priyanka/Coursera/shiny/Road_accident2005_17')
clear
clc
runApp('C:/Priyanka/Coursera/shiny/Road_accident2005_17')
runApp('C:/Priyanka/Coursera/shiny/Road_accident2005_17')
rsconnect::showLogs()
shiny::runApp('C:/Priyanka/Coursera/shiny/Road_accident2005_17')
shiny::runApp()
